package it.univpm.WeatherCloseRomeApp.utilities;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Vector;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import it.univpm.WeatherCloseRomeApp.exception.InvalidDateException;
import it.univpm.WeatherCloseRomeApp.exception.InvalidFieldException;
import it.univpm.WeatherCloseRomeApp.exception.InvalidNumberException;
import it.univpm.WeatherCloseRomeApp.exception.ShortDatabaseException;
import it.univpm.WeatherCloseRomeApp.service.TempServiceImpl;

class StatsAndFiltersTEST {
	
	private TempServiceImpl service;

	@BeforeEach
	void setUp() throws Exception {
		service = new TempServiceImpl();
	}

	@AfterEach
	void tearDown() throws Exception {
	}

	@Test
	@DisplayName("Corretta esecuzione di InvalidFieldException")
	void test1() {
		InvalidFieldException e = assertThrows(InvalidFieldException.class, () -> {service.orderStats("max", 3);});
		assertEquals("InvalidFieldException: campo errato.", e.toString());
		
	}
	
	@Test
	@DisplayName("Corretta esecuzione di InvalidDateException")
	void test2() {
		String data = "12-12-1999";
		Vector<String> datedisponibili = service.DateDisponibili();
		if (!datedisponibili.contains(data)) {
			InvalidDateException e= assertThrows(InvalidDateException.class, () -> {service.filterPeriod(50, data,7,"");});
			assertEquals("InvalidDateException: Data inserita incorretta.", e.toString());
					}
	}
	
	@Test
	@DisplayName("Corretta esecuzione ShortDatabaseException")
	void test3() {
		int numdays = 30;
		Vector<String> datedisponibili = service.DateDisponibili();
		String data0= datedisponibili.get(0);
		ShortDatabaseException e= assertThrows(ShortDatabaseException.class, () -> {service.filterPeriod(50,data0, numdays, "");});
		assertEquals("ShortDatabaseException: database insufficente.", e.toString());
	}
	
	

}
